# -*- coding: utf-8 -*-
"""KNeighborsClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cy411160xN8XhdXyOebKgcz8ciqtzGYv
"""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib

from google.colab import drive
drive.mount('/content/drive')

# Load the dataset
data = np.load("/content/drive/My Drive/Thesis_data/Master_integer.npy", allow_pickle=True)

# Separate features and target variable
X = data[:, :-1]
y = data[:, -1]

# Split the dataset into training, validation, and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)  # 0.25 x 0.8 = 0.2

print(data.shape)

# Initialize the KNeighborsClassifier
model = KNeighborsClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions on validation data
val_predictions = model.predict(X_val)

# Evaluate the model on validation data
val_accuracy = accuracy_score(y_val, val_predictions)
print("Validation Accuracy:", val_accuracy)

# Make predictions on test data
test_predictions = model.predict(X_test)

# Evaluate the model on test data
test_accuracy = accuracy_score(y_test, test_predictions)
print("Test Accuracy:", test_accuracy)

# Print classification report for test data
print(classification_report(y_test, test_predictions))

import joblib

# Save the trained model
joblib.dump(model, '/content/drive/My Drive/Thesis_data/KNeighborsClassifier.pkl')

print(X_test.shape)
print(test_predictions.shape)

# Extract unique integer labels
original_labels = np.unique(y)
predicted_unique = np.unique(test_predictions)

# Create a mapping between integer labels and class indices which will be later used in classification as classes.
label_to_index = {label: index for index, label in enumerate(original_labels)}

print(original_labels)
print(predicted_unique)
print(label_to_index)