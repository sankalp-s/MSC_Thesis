# -*- coding: utf-8 -*-
"""RandomForestClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TbfuOMUhTfJaCf1xjee5d6mZkEXVnSqW
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

data = np.load("/content/drive/My Drive/Thesis_data/Master_integer.npy",allow_pickle=True)

print(data.shape)

X = data[:, :-1]  # Features are all columns except the last one
y = data[:, -1]   # Target variable is the last column

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the RandomForestClassifier
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Print classification report
print(classification_report(y_test, y_pred))

import joblib

# Save the trained model
joblib.dump(model, '/content/drive/My Drive/Thesis_data/random_forest_model.pkl')

print(X_test.shape)
print(y_pred.shape)

print(y_pred[0])

def integer_to_binary_array(integer_value, array_length):
    """
    Convert an integer to a binary array of specified length.
    Parameters:
        integer_value (int): The integer value to be converted.
        array_length (int): The desired length of the binary array.
    Returns:
        list: The binary array representing the integer value.
    """
    binary_string = format(integer_value, 'b')  # Convert integer to binary string
    binary_array = [int(bit) for bit in binary_string.zfill(array_length)]  # Pad with leading zeros if needed
    return binary_array

def convert_integers_to_binary_arrays(data):
    """
    Convert integer values in the dataset back to binary arrays.
    Parameters:
        data (numpy.ndarray): The dataset containing integer values.
    Returns:
        numpy.ndarray: The dataset with integer values converted back to binary arrays.
    """
    binary_arrays_list = []
    for integer in data:
        binary_array = integer_to_binary_array(integer, array_length=12)  # Adjust array_length as needed
        binary_arrays_list.append(binary_array)
    return np.array(binary_arrays_list)

# Convert integer values back to binary arrays
action_data = convert_integers_to_binary_arrays(y_pred)

print(action_data.shape)
print()